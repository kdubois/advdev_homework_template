#!groovy
def GUID = "a594"
def localImgRegistry = "docker-registry.default.svc:5000"

podTemplate(
        label: "skopeo-pod",
        cloud: "openshift",
        inheritFrom: "maven",
        containers: [
                containerTemplate(
                        name: "jnlp",
                        image: "${localImgRegistry}/${GUID}-jenkins/jenkins-agent-appdev",
                        resourceRequestMemory: "1Gi",
                        resourceLimitMemory: "2Gi",
                        resourceRequestCpu: "1",
                        resourceLimitCpu: "2"
                )
        ]
) {
    node('skopeo-pod') {
        // Define Maven Command to point to the correct
        // settings for our Nexus installation
        def mvnCmd = "mvn -s ../nexus_settings.xml"
        def devProject = "${GUID}-tasks-dev"
        def prodProject = "${GUID}-tasks-prod"
        def nexusUser = "admin"
        def nexusPw = "redhat"

        // Checkout Source Code.
        stage('Checkout Source') {
            checkout scm
        }

        // Build the Tasks Service
        dir('openshift-tasks') {
            // The following variables need to be defined at the top level
            // and not inside the scope of a stage - otherwise they would not
            // be accessible from other stages.
            // Extract version from the pom.xml
            def version = getVersionFromPom("pom.xml")

            // TBD Set the tag for the development image: version + build number
            def devTag = "${version}-${env.BUILD_NUMBER}"

            // Set the tag for the production image: version
            def prodTag = "${version}"

            // Using Maven build the war file
            // Do not run tests in this step
            stage('Build war') {
                echo "Building version ${devTag}"

                sh "${mvnCmd} clean install -DskipTests"
            }

            // TBD: The next two stages should run in parallel

            // Using Maven run the unit tests
            stage('Unit Tests') {
                echo "Running Unit Tests"

                sh "${mvnCmd} test"
            }

            // Using Maven to call SonarQube for Code Analysis
            stage('Code Analysis') {
                echo "Running Code Analysis"

                sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-gpte-hw-cicd.apps.na311.openshift.opentlc.com"
            }

            // Publish the built war file to Nexus
            stage('Publish to Nexus') {
                echo "Publish to Nexus"

                sh "$mvnCmd deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-gpte-hw-cicd.apps.na311.openshift.opentlc.com/repository/releases"
            }

            // Build the OpenShift Image in OpenShift and tag it.
            stage('Build and Tag OpenShift Image') {
                echo "Building OpenShift container image tasks:${devTag}"

                script {
                    openshift.withCluster() {
                        openshift.withProject(devProject) {
                            openshift.selector('bc', 'tasks').startBuild('--from-file=target/openshift-tasks.war', '--wait')
                            openshift.tag("tasks:latest", "tasks:${devTag}")

                        }
                    }
                }
            }

            // Deploy the built image to the Development Environment.
            stage('Deploy to Dev') {
                echo "Deploying container image to Development Project"

                // TBD: Deploy to development Project
                //      Set Image, Set VERSION
                //      Make sure the application is running and ready before proceeding

                script {
                    openshift.withCluster() {
                        openshift.withProject(devProject) {
                            def dc = openshift.selector("dc", "tasks").object()
                            def dc_version = dc.status.latestVersion

                            openshift.set("image", "dc/tasks", "tasks=${localImgRegistry}/${devProject}/tasks:${devTag}")

                            openshift.set("env", "dc/tasks", "VERSION='${devTag} (tasks-dev)'")

                            if (openshift.selector('configmap/tasks-config').exists()) {
                                openshift.delete("configmap/tasks-config")
                            }

                            openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties')

                            openshift.selector("dc", "tasks").rollout().latest()

                            dc_version = openshift.selector("dc", "tasks").object().status.latestVersion

                            def rc = openshift.selector("rc", "tasks-${dc_version}").object()

                            echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
                            while (rc.spec.replicas != rc.status.readyReplicas) {
                                sleep 5
                                rc = openshift.selector("rc", "tasks-${dc_version}").object()
                                rc.status.phase == 'running'
                            }
                        }
                    }


                }
            }

            // Copy Image to Nexus container registry
            stage('Copy Image to Nexus container registry') {
                echo "Copy image to Nexus container registry"


                echo "Copy image to Nexus Docker Registry"

                sh 'export CLUSTER=$(oc whoami --show-server | cut -d. -f2- | cut -d: -f1)'

                sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false " +
                        "--src-creds openshift:\$(oc whoami -t) " +
                        "--dest-creds ${nexusUser}:${nexusPw} " +
                        "docker://${localImgRegistry}/${devProject}/tasks:${devTag} " +
                        "docker://nexus-registry-gpte-hw-cicd.apps.na311.openshift.opentlc.com/tasks-${GUID}:${prodTag}"

                // Tag the built image with the production tag.
                script {
                    openshift.withCluster() {
                        openshift.withProject(devProject) {
                            openshift.tag("tasks:${devTag}", "tasks:${prodTag}")
                        }
                    }
                }

            }

            // Blue/Green Deployment into Production
            // -------------------------------------
            def destApp = "tasks-green"
            def activeApp = ""

            stage('Blue/Green Production Deployment') {
                // TBD: Determine which application is active
                //      Set Image, Set VERSION
                //      Deploy into the other application
                //      Make sure the application is running and ready before proceeding

                script {
                    openshift.withCluster() {
                        openshift.withProject(prodProject) {

                            activeApp = openshift.selector("route", "tasks").object().spec.to.name == "tasks-green"
                            echo "The active app is ${activeApp}"
                            destApp = activeApp == 'green' ? 'tasks-blue' : 'tasks-green'
                            echo "We need to switch to ${destApp}"

                            echo "set image to ${localImgRegistry}/${devProject}/tasks:${prodTag}"

                            openshift.set("env", "dc/tasks", "VERSION='${prodTag} (${destApp})'")

                            openshift.set("image", "dc/" + destApp, "${destApp}=${localImgRegistry}/${devProject}/tasks:${prodTag}")

                            if (openshift.selector("configmap/${destApp}-config").exists()) {
                                openshift.delete("configmap/${destApp}-config")
                            }

                            openshift.create('configmap', "${destApp}-config", '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties')

                            openshift.selector("dc", "${destApp}").rollout().latest()

                            dc_version = openshift.selector("dc", "${destApp}").object().status.latestVersion

                            def rc = openshift.selector("rc", "${destApp}-${dc_version}").object()

                            echo "Waiting for ReplicationController ${destApp}-${dc_version} to be ready"
                            while (rc.spec.replicas != rc.status.readyReplicas) {
                                sleep 5
                                rc = openshift.selector("rc", "${destApp}-${dc_version}").object()
                                rc.status.phase == 'running'
                            }

                            // make sure the version hasn't changed yet
                            openshift.selector("route", "tasks").object().spec.to.name == activeApp

                        }
                    }
                }
            }

            stage('Switch over to new Version') {
                echo "Switching Production application to ${destApp}."
                script {
                    def userInput
                    try {
                        userInput = input(
                                id: 'Proceed1', message: 'Deploy to Production?', parameters: [
                                [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Please confirm are ready to deploy to production.']
                        ])
                    } catch (err) { // input false
                        def user = err.getCauses()[0].getUser()
                        userInput = false
                        echo "Aborted by: [${user}]"
                    }

                    node {
                        if (userInput == true) {
                            echo "Executing production switch"
                            openshift.withCluster() {
                                openshift.withProject(prodProject) {
                                    openshift.patch("route/tasks", "'{\"spec\":{\"to\":{\"name\":\"${activeApp}\"}}}'")
                                }
                            }
                        } else {
                            // do something else
                            echo "Deploy To Production Aborted."
                        }
                    }
                }
            }
        }
    }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
    def matcher = readFile(pom) =~ '<version>(.+)</version>'
    matcher ? matcher[0][1] : null
}